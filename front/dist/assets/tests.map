{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","djember-sample/tests/app.lint-test.js","djember-sample/tests/helpers/destroy-app.js","djember-sample/tests/helpers/ember-power-select.js","djember-sample/tests/helpers/ember-simple-auth.js","djember-sample/tests/helpers/ember-sortable/test-helpers.js","djember-sample/tests/helpers/module-for-acceptance.js","djember-sample/tests/helpers/resolver.js","djember-sample/tests/helpers/sl/register-test-helpers.js","djember-sample/tests/helpers/sl/synchronous.js","djember-sample/tests/helpers/sl/synchronous/ajax.js","djember-sample/tests/helpers/sl/synchronous/contains.js","djember-sample/tests/helpers/sl/synchronous/global-libraries.js","djember-sample/tests/helpers/sl/synchronous/requires.js","djember-sample/tests/helpers/sl/utils/utils.js","djember-sample/tests/helpers/start-app.js","djember-sample/tests/templates.template.lint-test.js","djember-sample/tests/test-helper.js","djember-sample/tests/tests.lint-test.js","djember-sample/tests/unit/models/accounting/invoice-test.js","djember-sample/tests/unit/models/accounting/invoiceline-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('djember-sample/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/basketitem.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/basketitem.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('application/adapter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/adapter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'application/route.js should pass ESLint\\n\\n17:37 - Strings must use singlequote. (quotes)');\n  });\n\n  QUnit.test('application/serializer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/serializer.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/django.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/django.js should pass ESLint\\n\\n9:3 - Unexpected var, use let or const instead. (no-var)\\n18:5 - Unexpected var, use let or const instead. (no-var)\\n76:9 - Strings must use singlequote. (quotes)\\n77:9 - Strings must use singlequote. (quotes)\\n78:9 - Strings must use singlequote. (quotes)');\n  });\n\n  QUnit.test('authorizers/django.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/django.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/main-menu/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/main-menu/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/options-getter/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/options-getter/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/product-card/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/product-card/component.js should pass ESLint\\n\\n12:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/shopping-cart/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/shopping-cart/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/tab-content/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tab-content/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/tab-set/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tab-set/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/user-info/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/user-info/component.js should pass ESLint\\n\\n8:1 - Trailing spaces not allowed. (no-trailing-spaces)\\n11:1 - Trailing spaces not allowed. (no-trailing-spaces)\\n14:7 - Unexpected var, use let or const instead. (no-var)');\n  });\n\n  QUnit.test('djember/app/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember/app/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('djember/form/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember/form/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('djember/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember/index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('djember/list/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember/list/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('djember/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/pretty-print.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/pretty-print.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'index/route.js should pass ESLint\\n\\n117:17 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('initializers/django.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'initializers/django.js should pass ESLint\\n\\n5:10 - Gratuitous parentheses around expression. (no-extra-parens)\\n16:32 - Strings must use singlequote. (quotes)\\n17:1 - Trailing spaces not allowed. (no-trailing-spaces)');\n  });\n\n  QUnit.test('login/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'login/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('login/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'login/route.js should pass ESLint\\n\\n5:1 - Trailing spaces not allowed. (no-trailing-spaces)');\n  });\n\n  QUnit.test('logout/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'logout/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('logout/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'logout/route.js should pass ESLint\\n\\n5:1 - Trailing spaces not allowed. (no-trailing-spaces)');\n  });\n\n  QUnit.test('models/accounting/invoice.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/accounting/invoice.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/accounting/invoiceline.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/accounting/invoiceline.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/base/accounting/invoice.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/base/accounting/invoice.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/base/accounting/invoiceline.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/base/accounting/invoiceline.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/basketitem.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/basketitem.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/userinfo.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/userinfo.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('sections.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sections.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/basketitem.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/basketitem.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/cart.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/cart.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/session.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/session.js should pass ESLint\\n\\n26:13 - Strings must use singlequote. (quotes)\\n27:13 - Strings must use singlequote. (quotes)\\n28:13 - Strings must use singlequote. (quotes)\\n38:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('shop/basket/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'shop/basket/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('shop/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'shop/index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transitions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'transitions.js should pass ESLint\\n\\n6:2 - Trailing spaces not allowed. (no-trailing-spaces)');\n  });\n});","define('djember-sample/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n    if (window.server) {\n      window.server.shutdown();\n    }\n  }\n});","define('djember-sample/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, { until: '1.11.0', id: `ember-power-select-test-support-${name}` }));\n\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('djember-sample/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const { __container__: container } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return app.testHelpers.wait();\n  }\n});","define('djember-sample/tests/helpers/ember-sortable/test-helpers', ['ember-sortable/helpers/drag', 'ember-sortable/helpers/reorder'], function () {\n  'use strict';\n});","define('djember-sample/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'djember-sample/tests/helpers/start-app', 'djember-sample/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name, options = {}) {\n    (0, _qunit.module)(name, {\n      beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach() {\n        let afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(() => (0, _destroyApp.default)(this.application));\n      }\n    });\n  };\n\n  const { RSVP: { resolve } } = Ember;\n});","define('djember-sample/tests/helpers/resolver', ['exports', 'djember-sample/resolver', 'djember-sample/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  const resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('djember-sample/tests/helpers/sl/register-test-helpers', ['exports', 'djember-sample/tests/helpers/sl/synchronous'], function (exports, _synchronous) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    exports.default = function () {\n        Ember.Test.registerHelper('contains', _synchronous.contains);\n        Ember.Test.registerHelper('Ajax', _synchronous.AjaxHelper);\n        Ember.Test.registerHelper('requires', _synchronous.requires);\n        Ember.Test.registerHelper('globalLibraries', _synchronous.globalLibraries);\n    };\n});","define('djember-sample/tests/helpers/sl/synchronous', ['exports', 'djember-sample/tests/helpers/sl/synchronous/ajax', 'djember-sample/tests/helpers/sl/synchronous/contains', 'djember-sample/tests/helpers/sl/synchronous/requires', 'djember-sample/tests/helpers/sl/synchronous/global-libraries'], function (exports, _ajax, _contains, _requires, _globalLibraries) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.globalLibraries = exports.requires = exports.contains = exports.AjaxHelper = undefined;\n    exports.AjaxHelper = _ajax.default;\n    exports.contains = _contains.default;\n    exports.requires = _requires.default;\n    exports.globalLibraries = _globalLibraries;\n});","define('djember-sample/tests/helpers/sl/synchronous/ajax', ['exports'], function (exports) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n\n    /**\n     * @module\n     */\n\n    /**\n     * Sets up the Ajax events for unit tests\n     *\n     * @class\n     */\n    class AjaxHelper {\n\n        /**\n         * Emulate the beginning of an AJAX request\n         *\n         * @function\n         * @static\n         * @param {String} [endpoint]\n         * @returns {undefined}\n         */\n        static begin(endpoint) {\n            Ember.run(() => {\n                if (endpoint) {\n                    Ember.$(document).trigger('ajaxSend', [null, { url: endpoint }]);\n                } else {\n                    Ember.$(document).trigger('ajaxStart');\n                }\n            });\n        }\n\n        /**\n         * Emulate the conclusion of an AJAX request\n         *\n         * @function\n         * @static\n         * @param {String} [endpoint]\n         * @returns {undefined}\n         */\n        static end(endpoint) {\n            Ember.run(() => {\n                if (endpoint) {\n                    Ember.$(document).trigger('ajaxComplete', [null, { url: endpoint }]);\n                } else {\n                    Ember.$(document).trigger('ajaxStop');\n                }\n            });\n        }\n    }\n\n    exports.default = AjaxHelper;\n});","define('djember-sample/tests/helpers/sl/synchronous/contains', ['exports', 'djember-sample/tests/helpers/sl/utils/utils'], function (exports, _utils) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    exports.default = function () {\n        const index = 3 === arguments.length ? 1 : 0;\n        const underTest = arguments[index];\n        const testFor = arguments[index + 1];\n\n        /* jshint ignore:start */\n        Ember.assert('First non-optional argument must be an array, string or object', ('object' === Ember.typeOf(underTest) || 'string' === Ember.typeOf(underTest) || 'array' === Ember.typeOf(underTest)) && 'symbol' !== typeof underTest);\n\n        Ember.assert('Second non-optional argument must be an array, string or object', ('object' === Ember.typeOf(testFor) || 'string' === Ember.typeOf(testFor) || 'array' === Ember.typeOf(testFor)) && 'symbol' !== typeof testFor);\n        /* jshint ignore:end */\n\n        return (0, _utils.doArraysIntersect)((0, _utils.convertToArray)(underTest), (0, _utils.convertToArray)(testFor));\n    };\n});","define('djember-sample/tests/helpers/sl/synchronous/global-libraries', ['exports', 'sinon'], function (exports, _sinon) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.emberJquerySpy = exports.jquerySpy = exports.jqueryAliasSpy = undefined;\n    exports.setupSpies = setupSpies;\n    exports.triggerEvents = triggerEvents;\n    exports.called = called;\n    exports.restoreSpies = restoreSpies;\n    exports.resetSpies = resetSpies;\n    let jqueryAliasSpy = exports.jqueryAliasSpy = undefined;\n    let jquerySpy = exports.jquerySpy = undefined;\n    let emberJquerySpy = exports.emberJquerySpy = undefined;\n\n    function setupSpies() {\n        exports.jqueryAliasSpy = jqueryAliasSpy = _sinon.default.spy(window, '$');\n        exports.jquerySpy = jquerySpy = _sinon.default.spy(window, 'jQuery');\n        exports.emberJquerySpy = emberJquerySpy = _sinon.default.spy(Ember, '$');\n    }\n\n    function triggerEvents(component) {\n        Ember.run(() => {\n            ['willInsertElement', 'didInsertElement', 'willClearRender', 'willDestroyElement'].map(event => {\n                component.trigger(event);\n            });\n        });\n    }\n\n    function called() {\n        return jqueryAliasSpy.called || jquerySpy.called || emberJquerySpy.called;\n    }\n\n    function restoreSpies() {\n        window.$.restore();\n        window.jQuery.restore();\n        Ember.$.restore();\n    }\n\n    function resetSpies() {\n        jqueryAliasSpy.reset();\n        jquerySpy.reset();\n        emberJquerySpy.reset();\n    }\n});","define('djember-sample/tests/helpers/sl/synchronous/requires', ['exports'], function (exports) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n\n    /**\n     * @module\n     */\n\n    /**\n     * Test that an argument passed to a function is of the required type(s).\n     *\n     * @function\n     * @param {Function} methodUnderTest\n     * @param {Array} requiredTypes\n     * @returns {Object}\n     */\n    const requiresHelper = function (methodUnderTest, requiredTypes) {\n        const typesToTest = {\n            'number': {\n                required: false,\n                testValue: 123987465,\n                message: 'Parameter was a number'\n            },\n            'string': {\n                required: false,\n                testValue: 'testString',\n                message: 'Parameter was a string'\n            },\n            'array': {\n                required: false,\n                testValue: [],\n                message: 'Parameter was an array'\n            },\n            'object': {\n                required: false,\n                testValue: {},\n                message: 'Parameter was an object'\n            },\n            'function': {\n                required: false,\n                testValue() {},\n                message: 'Parameter was a function'\n            },\n            'undefined': {\n                required: false,\n                testValue: undefined,\n                message: 'Parameter was undefined'\n            },\n            'boolean': {\n                required: false,\n                testValue: true,\n                message: 'Parameter was a boolean'\n            },\n            'null': {\n                required: false,\n                testValue: null,\n                message: 'Parameter was null'\n            }\n        };\n\n        Ember.assert('First argument must be a function', 'function' === Ember.typeOf(methodUnderTest));\n        Ember.assert('Second argument must be an array', 'array' === Ember.typeOf(requiredTypes));\n\n        // Set required parameter types\n        requiredTypes.forEach(item => {\n            typesToTest[item]['required'] = true;\n        });\n\n        const testsThatHaveFailed = [];\n        let property;\n\n        // Test each parameter type\n        for (property in typesToTest) {\n            if (typesToTest.hasOwnProperty(property)) {\n                // Reset flag\n                let assertionThrown;\n                assertionThrown = false;\n\n                // Assign cleaner object reference\n                const parameter = typesToTest[property];\n\n                // Test parameter\n                try {\n                    methodUnderTest(parameter['testValue']);\n                } catch (error) {\n                    assertionThrown = true;\n                }\n\n                let assertionPassed;\n                assertionPassed = parameter['required'] ? !assertionThrown : assertionThrown;\n\n                if (!assertionPassed) {\n                    testsThatHaveFailed.push(parameter['message']);\n                }\n            }\n        }\n\n        return {\n            requires: 0 === testsThatHaveFailed.length,\n            messages: testsThatHaveFailed.join('; ')\n        };\n    };\n\n    exports.default = requiresHelper;\n});","define('djember-sample/tests/helpers/sl/utils/utils', ['exports'], function (exports) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n\n    /**\n     * @module\n     */\n\n    /**\n     * Converts provided parameter into an array\n     *\n     * @function\n     * @param {Array|String|Object} underTest\n     * @throws {ember.assert} If not provided an Array, String or Object\n     * @returns {Array}\n     */\n    const convertToArray = function (underTest) {\n\n        /* jshint ignore:start */\n        Ember.assert('Array, String, or Object must be supplied', ('array' === Ember.typeOf(underTest) || 'string' === Ember.typeOf(underTest) || 'object' === Ember.typeOf(underTest)) && 'symbol' !== typeof underTest);\n        /* jshint ignore:end */\n\n        let returnArray = underTest;\n\n        switch (Ember.typeOf(underTest)) {\n            case 'array':\n                returnArray = underTest;\n                break;\n\n            case 'string':\n                returnArray = convertStringToArray(underTest);\n                break;\n\n            case 'object':\n                returnArray = convertObjectKeysToArray(underTest);\n                break;\n        }\n\n        return returnArray;\n    };\n\n    /**\n     * Splits a string into an array of individual \"words\" as delineated by spaces\n     *\n     * Primarily exists to convert format of call to .prop( 'class' )\n     *\n     * @function\n     * @param {String} underTest\n     * @throws {ember.assert} If argument is not provided or is not a string\n     * @returns {Array}\n     */\n    const convertStringToArray = function (underTest) {\n\n        Ember.assert('String must be supplied', 'string' === Ember.typeOf(underTest));\n\n        return underTest.split(' ');\n    };\n\n    /**\n     * Returns an array containing all of the property names of an object\n     *\n     * Property names are only extracted from the object provided.  No recursion into nested objects occurs.\n     *\n     * @function\n     * @param {Object} underTest\n     * @throws {ember.assert} If argument is not provided or is not an object\n     * @returns {Array}\n     */\n    const convertObjectKeysToArray = function (underTest) {\n\n        /* jshint ignore:start */\n        Ember.assert('Object must be supplied', 'object' === Ember.typeOf(underTest) && 'array' !== Ember.typeOf(underTest) && 'symbol' !== typeof underTest);\n        /* jshint ignore:end */\n\n        return Object.keys(underTest);\n    };\n\n    /**\n     * Whether at least one element of the array exists in the other\n     *\n     * @function\n     * @param {Array} underTest\n     * @param {Array} testFor\n     * @returns {Boolean}\n     */\n    const doArraysIntersect = function (underTest, testFor) {\n\n        Ember.assert('Parameters must be Arrays', 'array' === Ember.typeOf(underTest) && 'array' === Ember.typeOf(testFor));\n\n        return testFor.some(function (v) {\n            return underTest.indexOf(v) >= 0;\n        });\n    };\n\n    exports.convertToArray = convertToArray;\n    exports.convertStringToArray = convertStringToArray;\n    exports.convertObjectKeysToArray = convertObjectKeysToArray;\n    exports.doArraysIntersect = doArraysIntersect;\n});","define('djember-sample/tests/helpers/start-app', ['exports', 'djember-sample/tests/helpers/sl/register-test-helpers', 'djember-sample/app', 'djember-sample/config/environment'], function (exports, _registerTestHelpers, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    let attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(() => {\n      let application = _app.default.create(attributes);\n      application.setupForTesting();\n      (0, _registerTestHelpers.default)();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('djember-sample/tests/templates.template.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('TemplateLint');\n\n  QUnit.test('djember-sample/application/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'djember-sample/application/template.hbs should pass TemplateLint.\\n\\ndjember-sample/application/template.hbs\\n  22:68  error  Self-closing a void element is redundant  self-closing-void-elements\\n  24:58  error  Self-closing a void element is redundant  self-closing-void-elements\\n  26:63  error  Self-closing a void element is redundant  self-closing-void-elements\\n');\n  });\n\n  QUnit.test('djember-sample/components/main-menu/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/components/main-menu/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/components/options-getter/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'djember-sample/components/options-getter/template.hbs should pass TemplateLint.\\n\\ndjember-sample/components/options-getter/template.hbs\\n  3:0  error  Incorrect indentation for `{{pretty-print}}` beginning at L3:C0. Expected `{{pretty-print}}` to be at an indentation of 4 but was found at 0.  block-indentation\\n');\n  });\n\n  QUnit.test('djember-sample/components/product-card/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'djember-sample/components/product-card/template.hbs should pass TemplateLint.\\n\\ndjember-sample/components/product-card/template.hbs\\n  4:2  error  Self-closing a void element is redundant  self-closing-void-elements\\n  4:7  error  Self-closing a void element is redundant  self-closing-void-elements\\n');\n  });\n\n  QUnit.test('djember-sample/components/shopping-cart/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/components/shopping-cart/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/components/tab-content/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/components/tab-content/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/components/tab-set/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/components/tab-set/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/components/user-info/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/components/user-info/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/djember/form/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/djember/form/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/djember/index/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/djember/index/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/djember/list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/djember/list/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/djember/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/djember/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/index/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/index/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/login/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/login/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/logout/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/logout/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/shop/basket/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'djember-sample/shop/basket/template.hbs should pass TemplateLint.\\n\\ndjember-sample/shop/basket/template.hbs\\n  29:4  error  Self-closing a void element is redundant  self-closing-void-elements\\n');\n  });\n\n  QUnit.test('djember-sample/shop/index/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/shop/index/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/accounting-endpoints.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/accounting-endpoints.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/actions-structure.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/actions-structure.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/app-structure.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/app-structure.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/backend-code.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/backend-code.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/base-invoice-js.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/base-invoice-js.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/bootstrap-code.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/bootstrap-code.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/crm-endpoints.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/crm-endpoints.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/djember/form/loading.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/djember/form/loading.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/djember/list/loading.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/djember/list/loading.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/djember/loading.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/djember/loading.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/fields-structure.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/fields-structure.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/form-structure.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/form-structure.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/frontend-code.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/frontend-code.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/image-upload.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/image-upload.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/invoice-js.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/invoice-js.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/invoiceline-js.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/invoiceline-js.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/list-structure.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/list-structure.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/loading.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/loading.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/models-structure.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/models-structure.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('djember-sample/templates/products-endpoints.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'djember-sample/templates/products-endpoints.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define('djember-sample/tests/test-helper', ['djember-sample/app', 'djember-sample/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('djember-sample/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n19:11 - \\'afterEach\\' is never reassigned. Use \\'const\\' instead. (prefer-const)\\n20:44 - Expected block statement surrounding arrow body. (arrow-body-style)');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/start-app.js should pass ESLint\\n\\n11:9 - \\'application\\' is never reassigned. Use \\'const\\' instead. (prefer-const)');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/accounting/invoice-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/models/accounting/invoice-test.js should pass ESLint\\n\\n9:7 - \\'model\\' is never reassigned. Use \\'const\\' instead. (prefer-const)');\n  });\n\n  QUnit.test('unit/models/accounting/invoiceline-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/models/accounting/invoiceline-test.js should pass ESLint\\n\\n9:7 - \\'model\\' is never reassigned. Use \\'const\\' instead. (prefer-const)');\n  });\n});","define('djember-sample/tests/unit/models/accounting/invoice-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('accounting/invoice', 'Unit | Model | accounting/invoice', {\n    // Specify the other units that are required for this test.\n    needs: ['model:accounting/invoiceline', 'model:crm/company']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('djember-sample/tests/unit/models/accounting/invoiceline-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('accounting/invoiceline', 'Unit | Model | accounting/invoiceline', {\n    // Specify the other units that are required for this test.\n    needs: ['model:accounting/invoice', 'model:products/product']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('djember-sample/config/environment', [], function() {\n  var prefix = 'djember-sample';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('djember-sample/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingshNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACltCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}